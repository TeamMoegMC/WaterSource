buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}-${mod_phase}-${minecraft_version}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'WaterSource'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                watersource {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                watersource {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'info'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                watersource {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "silveroak"
        url = "https://maven.lemonslice.cloud/releases"
    }
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        name = "jei"
        url = "https://dvs1.progwml6.com/files/maven"
    }
}
dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.23'

    compile fg.deobf("cloud.lemonslice.silveroak:SilveroakOutpost-Forge-1.16.5:0.3.5-Beta")
    compile fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "Water Source",
                "Specification-Vendor": "Lemon Slice Studio",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Lemon Slice Studio",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

def getPrivateString(String key) {
    File propFile = file("private.properties")
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if ((props[key]).isEmpty()) {
            return "NULL"
        } else return props[key]
    } else {
        return "NULL"
    }
}


jar.finalizedBy('reobfJar')
publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
    repositories {
//        maven {
//            name = "TeamMoeg"
//            url = "http://server.teammoeg.com:8888/releases"
//            credentials {
//                username = getPrivateString("mavenUser")
//                password = getPrivateString("mavenToken")
//            }
//            authentication {
//                basic(BasicAuthentication)
//            }
//        }
        maven {
            name = "COS"
            url = "http://127.0.0.1:9999"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}